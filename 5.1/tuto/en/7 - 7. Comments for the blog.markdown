On this chapter we will allow visitors to comment our blog articles.

##Declare the data model
To store the comments, we need to create a new table in
*config/doctrine/schema.yml*
[code]
ArticleComment:
  actAs:
    Timestampable:
  columns:
    article_id:       { type: integer, notnull: true }
    author:           { type: string(120), notnull: true }
    site:             { type: string(255), extra: link }
    body:             { type: clob, notnull: true }
    is_active:        { type: boolean, notnull: true, default: true }
  relations:
    Article:
      class:          Article      # just for clarity
      local:          article_id   # just for clarity
      onDelete:       CASCADE
      foreignAlias:   Comments
[/code]
An ArticleComment:
###actAs
####Timestampable
Each comment has a _created_at_ column and an _updated_at_ column. These columns store the date when the comment was created and updated.
###columns
####article_id
The comment article_id is a local key to a Article. It can NOT be empty: a comment can not have no article.
####author
The comment author's name. Can not be empty
####site
The comment author's website url. Can be empty. By declaring "extra: link" we tell the model this column will store urls.
####body
The comment text can not be empty.
####is_active
Whether or not the comment appears on the article page. If you want to review each comment before it gets published, set "default: false". If you want the comment to appear immediately on the article page, without validation, set "default: true".
###relations
####Article
The comment is related to one article. We can write
[code php]
$article = $comment->Article; // returns an Article instance
[/code]
By declaring "foreignAlias: Comments" we allow to write
[code php]
$comments = $article->Comments; // returns all article comments
[/code]

##Update the project
As we modified the schema.yml, the first thing to do is... migrate the database.
In command line, from your project root dir, run:
[code]
php symfony doctrine:generate-migrations-diff

php symfony doctrine:migrate

php symfony dm:setup
[/code]
Now we have an ArticleComment model in *lib/model/doctrine/ArticleComment.class.php*, an ArticleCommentForm form in *lib/form/doctrine/ArticleCommentForm.class.php*, and an article_comment table in the database.

##Create an admin interface
We need to manage comments in the admin application. Like for the article module, we just need to tell Diem the articleComment module exists, and let it generate the code.

###Declare the articleComment module
Open *config/dm/modules.yml* and add the articleComment module to the Blog namespace.
[code]
  Blog:

    article:
      page:         true
      components:
        list:
        listSide:
        show:

    articleComment:
[/code]

###Generate admin interface
Now Diem is aware about the articleComment module. We will ask it to generate an admin interface for it.
In a command line, from the project root dir, run:
[code]
php symfony dm:setup
[/code]
Look into *apps/admin/modules/articleComment*, an admin module has been generated.

###Generate some dummy comments.
Go on the admin application, the Content menu now contains a link to the articleComment module. Click it and generate, let's say, 20 comments from the "Loremize" box.
![](media:719)
We now have plenty of comments randomly linked to our blog articles.

##Display comments on the article page.
We want to display a list of comments on each article page. The comment list must be filtered by article.
Let's say it to Diem via the modules.yml file.
###Declare the articleComment/listByArticle component
We will add a "listByArticle" component to the articleComment module, and declare this list is filtered by article.
*config/dm/modules.yml*
[code]
  Blog:

    article:
      page:         true
      components:
        list:
        listSide:
        show:

    articleComment:
      components:
        listByArticle: { filters: article }
[/code]
As the component "listByArticle" begins with "list", Diem nows it manipulates a set of records.
By declaring "{ filters: article }" we say we want only comments related to an article.

###Generate the code
Go on the front interface and click the refresh button. Now, let's have a look to the generated code:
*apps/front/modules/articleComment/actions/components.class.php*
[code php]
class articleCommentComponents extends myFrontModuleComponents
{
  public function executeListByArticle()
  {
    $query = $this->getListQuery();

    $this->articleCommentPager = $this->getPager($query);
  }
}
[/code]
This is good, we don't need to change anything.
Now for the template:
*apps/front/modules/articleComment/templates/_listByArticle.php*
[code php]
echo $articleCommentPager->renderNavigationTop();

echo _open('ul.elements');

foreach ($articleCommentPager as $articleComment)
{
  echo _open('li.element');

    echo $articleComment;

  echo _close('li');
}

echo _close('ul');

echo $articleCommentPager->renderNavigationBottom();
[/code]

Ok, let it untouched, we'll try to put it on the page to see what it looks like.
###Drop the articleComment/listByArticle widget
Go on one of the article pages. Open the "Add" menu, find the articleComment/listByArticle widget, take it and drop it just under the article. A dialog opens:
![](media:720)
"listByArticle" starts with "list" so we have the common list controls: "Order By" and "Per page".
Moreover, we specified the "article" filter with { filters: article }. So we can choose the article we want to display comments. By letting this value to automatic, we ensure the choosen article will always be the current one shown on the page.
Save the widget. Only the comment authors are displayed, we need to customize the partial.
>**I see no comments**
>Maybe the article you are browsing has no active comments. Try with another one.

###Customize the _listByArticle partial
In order to render the comment author, the date and the text, use this code in the partial:
*apps/front/modules/articleComment/template/_listByArticle.php*
[code php]
use_helper('Date', 'Text');

echo $articleCommentPager->renderNavigationTop();

echo _open('ul.elements');

foreach ($articleCommentPager as $articleComment)
{
  echo _open('li.element');

    // if the comment has a site
    if ($articleComment->site)
    {
      // show the author with a link to his site
      $author = _link($articleComment->site)->text(escape($articleComment->author));
    }
    else
    {
      // just show the author
      $author = escape($articleComment->author);
    }

    echo _tag('p.infos',
      _tag('span.author', $author).
      _tag('span.date', format_date($articleComment->createdAt, 'D'))
    );

    echo _tag('p', simple_format_text(escape($articleComment->body)));

  echo _close('li');
}

echo _close('ul');

echo $articleCommentPager->renderNavigationBottom();
[/code]
The comments list is done.
###Add a title above the comment list
We need a H2 saying "Comments" above the comments list. Drag&drop a content/title widget and configure it quickly.
![](media:721)

## Add the comment form
Visitors need a form to comment our articles. To implement such a form, we of course need a component and a partial, but also a symfony action to validate the form data and save the comment on database.
###Declare the articleComment/form component
Let's declare the component as we use to do. Open the modules.yml config file and add the "form" component to the articleComment module:
*config/dm/modules.yml*
[code]
  Blog:

    article:
      page:     true
      components:
        list:
        listSide:
        show:

    articleComment:
      components:
        listByArticle:      { filters: article }
        form:
[/code]
###Generate the code
Click on the refresh button.
As usual, a "executeForm()" component method is generated. But this time, it gathers an existing form to pass it to the partial.
*apps/front/modules/articleComment/actions/components.class.php*
[code php]
class articleCommentComponents extends myFrontModuleComponents
{
  // ...

  public function executeForm()
  {
    $this->form = $this->forms['ArticleComment'];
  }
[/code]

A partial is generated to render the form. It's minimalist, but it works.
*apps/front/modules/articleComment/templates/_form.php*
[code php]
echo $form;
[/code]

Something new! A symfony action has been generated.
*apps/front/modules/articleComment/actions/actions.class.php*
[code php]
class articleCommentActions extends myFrontModuleActions
{

  public function executeFormWidget(dmWebRequest $request)
  {
    $form = $this->forms['ArticleComment'];

    if ($request->isMethod('post') && $form->bindAndValid($request))
    {
      $form->save();
      $this->redirectBack();
    }
  }

}
[/code]
>**The "form" component**
>We know that prefixing a component name with "list" tells Diem the component is about a set of records.
>By prefixing the component name with "show", it's about one record.
>The third and last keyword is "form". It tells Diem the component is used to render a form.

###About the symfony action
